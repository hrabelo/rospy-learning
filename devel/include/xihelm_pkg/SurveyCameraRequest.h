// Generated by gencpp from file xihelm_pkg/SurveyCameraRequest.msg
// DO NOT EDIT!


#ifndef XIHELM_PKG_MESSAGE_SURVEYCAMERAREQUEST_H
#define XIHELM_PKG_MESSAGE_SURVEYCAMERAREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xihelm_pkg
{
template <class ContainerAllocator>
struct SurveyCameraRequest_
{
  typedef SurveyCameraRequest_<ContainerAllocator> Type;

  SurveyCameraRequest_()
    : pos(0.0)  {
    }
  SurveyCameraRequest_(const ContainerAllocator& _alloc)
    : pos(0.0)  {
  (void)_alloc;
    }



   typedef float _pos_type;
  _pos_type pos;





  typedef boost::shared_ptr< ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SurveyCameraRequest_

typedef ::xihelm_pkg::SurveyCameraRequest_<std::allocator<void> > SurveyCameraRequest;

typedef boost::shared_ptr< ::xihelm_pkg::SurveyCameraRequest > SurveyCameraRequestPtr;
typedef boost::shared_ptr< ::xihelm_pkg::SurveyCameraRequest const> SurveyCameraRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator1> & lhs, const ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pos == rhs.pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator1> & lhs, const ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xihelm_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6fb6507bc71350dd1c10d16c76b741e";
  }

  static const char* value(const ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6fb6507bc71350dULL;
  static const uint64_t static_value2 = 0xd1c10d16c76b741eULL;
};

template<class ContainerAllocator>
struct DataType< ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xihelm_pkg/SurveyCameraRequest";
  }

  static const char* value(const ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pos\n"
;
  }

  static const char* value(const ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SurveyCameraRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xihelm_pkg::SurveyCameraRequest_<ContainerAllocator>& v)
  {
    s << indent << "pos: ";
    Printer<float>::stream(s, indent + "  ", v.pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XIHELM_PKG_MESSAGE_SURVEYCAMERAREQUEST_H
